version=pmwiki-2.2.0-beta68 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.1) Gecko/20061205 Iceweasel/2.0.0.1 (Debian-2.0.0.1+dfsg-1)
author=Ralph
charset=ISO-8859-1
csum=
ctime=1181479161
host=71.220.217.161
name=PmWiki.Forms
rev=38
targets=PmWiki.WikiAdministrator,Site.AuthForm,Test.InputSelect,Profiles.PhilB,Profiles.PeterBowers,Test.JumpBox,Cookbook.Input
text=(:Summary:How you can embed input forms into wiki pages:)%0aThis page explains how you can embed input forms into wiki pages.%0a%0aInput forms capability became standard after 2.0.beta44, and further improvements to forms processing can be found in the Cookbook (see below).%0a%0aInput forms don't actually handle any processing of the form data -- it simply allows creation of forms inside of wiki pages.  However, it is extensible and makes it possible for the [[wiki administrator]] to create custom form elements (see the example of edit page elements below).%0a%0a!! Markup%0a%0aThis recipe defines an [@(:input:)@] markup which can be used to create a variety of form controls.  For most controls the markup has the form%0a%0a    [=(:input=] ''type'' ''name'' ''value'' ''option=value'':)%0a%0awhere ''type'' is the type of input element (described below), ''name'' is the name of the control, ''value'' is its initial value, and options are used to specify additional attributes to the control.  For example, the following creates a text input control with a size of 30 characters:%0a%0a(:markup:)%0a(:input text authorid "Jane Doe" size=30:)%0a(:markupend:)%0a%0aFor convenience, an author can also specify name and value arguments directly using [@name=@] and [@value=@] attributes (same as HTML):%0a%0a(:markup:) %0a(:input text name=authorid value="Jane Doe" size=30:)%0a(:markupend:)%0a%0a!!!Form markups%0a%0aTwo directives are used to begin and end forms:%0a%0a    [=(:input=] form "''url''" ''method'':)%0a    ...%0a    [=(:input end:)=]%0a%0aThe [@(:input form:)@] directive starts a form that will post to ''url'' using the supplied ''method''.  The ''url'' must be in quotes.  If the url is omitted, then the current page is assumed.  If ''method'' is omitted then "POST" is assumed.  The [@(:input end:)@] directive ends the current form.%0a%0aNote that this recipe doesn't (yet?) make any attempt to ensure that the form output is correct HTML -- it assumes the author knows a little bit of what he or she is doing.%0a%0a!!!Standard input controls%0a[[#standardinputcontrols]]%0a%0aThe standard input controls are:%0a%0a    [=(:input=] text ''name'' ''value'' size=''n'':)%0a    [=(:input=] hidden ''name'' ''value'':)%0a    [=(:input=] password ''name'' ''value'':)%0a    [=(:input=] radio ''name'' ''value'':)%0a    [=(:input=] checkbox ''name'' ''value'':)%0a    [=(:input=] [[#select|select]] ''name'' ''value'' ''label'':)%0a    [=(:input=] [[Cookbook:InputDefault|default]] ''default-name'' ''default-value'':) %0a    [=(:input=] submit ''name'' ''value'':)%0a    [=(:input=] textarea ''name'' ''value'' rows=''n'' cols=''n'':)%0a    [=(:input=] reset ''name'' ''label'':)%0a    [=(:input=] file ''name'' ''label'':)%0a    [=(:input=] image ''name'' ''"src"'' ''alt'':)%0a%0aWhere ''name'' and ''value'' are in the HTML syntax: name="addr" value="808 W Franklin"%0a%0aFor the [@textarea@] control a value can be set from PmWiki 2.2.0beta45 onwards. %0a%0aThe [@submit@] control will more often be written as:%0a%0a    [=(:input=] submit value=''label'':)%0a%0a!!!!Example%0a%0aHere's a more complete example, e.g., for a login prompt:%0a%0a(:markup:) [=%0a(:input form "http://www.example.com":)%0a(:input hidden action login:)%0a||     Name:||(:input text username:)    ||%0a|| Password:||(:input password password:)||%0a|| ||(:input submit value="Log In":) ||%0a(:input end:)%0a=]%0a%0a!!!Page edit controls[[#pageeditcontrols]]%0a%0aThis feature also defines a number of custom types for implementing page edit controls.  These are (more are forthcoming):%0a%0a    [=(:input=] e_form:)     %0a    [=(:input=] e_text rows=''n'' cols=''n'':)%0a    [=(:input=] e_save:)%0a    [=(:input=] e_saveedit:)%0a    [=(:input=] e_cancel:)%0a    [=(:e_preview:)=]%0a    [=(:input=] e_minor:)%0a    [=(:input=] e_author:)%0a%0aHowever, they only display as controls when viewed with ?action=edit.%0aThus, an edit page could be formatted with something like:%0a%0a(:markup:)%0a!!Editing {$FullName}%0a(:input e_form:)%0a(:input e_text rows=5 cols=40:) \\%0aAuthor: (:input e_author:) (:input e_minor:) This is a minor edit \\%0a(:input e_save value="$[Save]" :) (:input e_preview value="$[View Pre]":)%0a(:input end:)%0a(:markupend:)%0a%0a!!!Custom input controls%0a%0aThis feature also allows wiki administrators to design custom input controls through the $InputTags array.  Documentation of this feature will be forthcoming.%0a%0aSee for a custom input tag for instance: Cookbook:InputJumpBox%0a%0aExample: '''Input text box which clears a value set when clicked''' (using script with onfocus event): %0aAdd to your local config file:%0a%0a[@# input text box will keep initial value, unless name contains '-clear'%0a$InputTags['text'][':html'] = "%3cinput type='text' \$InputFormArgs  %0a    onfocus=\"if(this.name.indexOf('-clear')!=-1) this.value=''\" />";@]%0a%0aNow if you want an input textbox, which will be cleared when clicking it, add to the name '-clear', like:%0a->[@(:input text box1-clear "Value will clear":)@]%0a%0aOr alternatively add to local config:%0a%0a[@# input text box will clear initial value, unless name contains '-fix'%0a$InputTags['text'][':html'] = "%3cinput type='text' \$InputFormArgs  %0a    onfocus=\"if(this.name.indexOf('-fix')==-1) this.value=''\" />";@]%0a%0aNow any textbox will clear when clicked, unless its name contains '-fix', like:%0a->[@(:input text box2-fix "Value will stay":)@]%0a%0a----%0a%0a[[#auth_form]]%0a!![@(:input auth_form:)@] %0a%0aWhen someone hits "Save" on a page, we don't want to lose their edits so, any variables that are posted as part of the save get preserved in the AuthForm, so that when they send the password it's just like they were re-posting the page%0a%0aThis is used in [[Site.AuthForm]]. Basically it's [@%3cform action='{$_SERVER['REQUEST_URI']}'@] [@method='post'@] [@name='authform'>\$PostVars@] where [@$PostVars@] is a sequence of [@%3cinput type='hidden'@] [@name='...'@] [@value='...'@] [@/>@] tags that encode whatever was posted when the auth_form was generated.  Essentially [@$PostVars@] takes the contents of [@$_POST@] and submits them as part of the auth form.%0a%0a----%0a%0a[[#select]]%0a!![@(:input select ... :)@] %0a%0a[[Test.InputSelect|This page]] (largely reproduced below) is testing the new [@(:input select ... :)@] markup in forms, as well as testing the ability to retain values across form submissions.%0a%0aWe'll start with [@(:input select ...:)@].  The basic form of a select box is a sequence of options:%0a%0a(:markup:) [=%0a%0a(:input form:)%0a(:input form:)%0a(:input select name=abc value=1 label=alpha :)%0a(:input select name=abc value=2 label=beta  :)%0a(:input select name=abc value=3 label=gamma :)%0a(:input submit:)%0a(:input end:)%0a=]%0a%0aOr, the values can be specified positionally:%0a%0a(:markup:) [=%0a(:input select name=abc 1 alpha :)%0a(:input select name=abc 2 beta  :)%0a(:input select name=abc 3 gamma :)%0a=]%0a%0a%0aWe can specify the size of the selection box:%0a%0a(:markup:) [=%0a(:input select name=abc 1 alpha size=3 :)%0a(:input select name=abc 2 beta  :)%0a(:input select name=abc 3 gamma :)%0a=]%0a%0a%0aThe "multiple" option works:%0a%0a(:markup:) [=%0a(:input select name=abc 1 alpha size=3 multiple:)%0a(:input select name=abc 2 beta  selected=selected:)%0a(:input select name=abc 3 gamma :)%0a=]%0a%0aSo, here's a dropdown list of pages in the Test group:%0a%0a(:markup:) [=%0a(:if false:)%0a[[#dropdownlist]]%0a(:input select name=n {=$FullName} "{=$Name}":)%0a[[#dropdownlistend]]%0a(:if:)%0a%0a(:pagelist fmt=#dropdownlist group=Test:)%0a=]%0a%0aA group page navigator:%0a%0a(:markup:) [=%0a>>display=none%3c%3c[@%0a[[#navigator]]%0a(:if equal {=$FullName} {*$FullName}:)%0a(:input select name=n  selected=selected {=$FullName} "{=$Name}":)%0a(:if ! equal {=$FullName} {*$FullName}:)%0a(:input select name=n {=$FullName} "{=$Name}":)%0a[[#navigatorend]]%0a@](:nl:)>>%3c%3c%0a%0a(:pagelist fmt=#navigator group=Test:)%0a=]%0a%0aIn the examples above, setting the name to n ("name=n") will make the form navigate to the page identified in the selected value of the input on submission.  If you don't want to navigate to the page, try changing the name to something else.   %0a%0a%0a[[#notes]]%0a!! Notes%0aNote that as of pmwiki-2.2.0-beta26, to have two select boxes inline, not only should you give them different @@name=@@ parameters, but also have a separator, like a character, [@&nbsp;@] or even the null sequence [@[==]@] between them:%0a(:markup:)%0a(:input form:)%0a(:input select name=FIRST value=1:)(:input select name=FIRST value=2:)[==]%0a(:input select name=SECOND value=3:)(:input select name=SECOND value=4:)%0a(:input end:)%0a(:markupend:)%0a%0a[[#comments]]%0a!! Comments%0aIs it possible to fill the dropdown list with the content of a page (where I have written all the options line by line)? A kind of (:include:) but inside the dropdownlist. Such a feature should be nice for long lists! [[~PhilB]] January 29, 2007, at 01:48 AM%0a%0aWhat change would be needed in the php script in order to correctly process the "multiple" option in the (:input select:)?  Currently they are listed (thru GET method) as individual name=value1?name=value2 etc and so when the php script processes them it assigns whichever is the last one as the actual value.  Thus instead of n values you end up with exactly 1 value, always the last one.  The net effect is that form values are not maintained through the submission process.  I can figure out how to process it otherwise in php, but I don't know what sort of data structure is being used for that "multiple" option -- is it an array?  --[[~Peter Bowers]] October 28, 2007%0a----%0a%0a!! See Also%0aNew Input Form markup demonstration (PmWiki 2.2.0 beta17)%0a*[[Cookbook:Input Default]] {Cookbook.InputDefault$:Summary}%0a*[[Cookbook:Input JumpBox]] {Cookbook.InputJumpBox$:Summary}%0a*[[Cookbook:Form Validation]] {Cookbook.FormValidation$:Summary}%0a*[[Cookbook:Form Extensions]] {Cookbook.FormExtensions$:Summary}%0a*[[Cookbook:Input Forms and JavaScript]] {Cookbook.InputFormsAndJavaScript$:Summary}%0a%0aCompatible recipes:%0a* [[Cookbook:Pm Form]] {Cookbook/PmForm$:Summary}%0a* [[Cookbook:Fox]] {Cookbook.Fox$:Summary}%0a* [[Cookbook:Wiki Forms]] {Cookbook/WikiForms$:Summary}%0a* [[Cookbook:ProcessForm]] {Cookbook/ProcessForm$:Summary}%0a%0a!! Sandbox%0aFeel free to use the space below to experiment with creating forms.%0a%0a(:markup:)%0a(:input form vtest :)%0a(:input select name=test value=1 label=test1:)%0a(:input select name=test value=2 label=test2:) \\\%0a(:input text name=comment value="test12":)%0a(:input radio foo 1 xyz:)%0a(:input radio foo 2 abc:)%0a(:input submit:)%0a(:input end:)%0a(:markupend:)%0a%0a(:markup:)%0a(:Message:%0aCan a textarea's default value %0ahave a line-break in it?"%0a:)%0a(:input defaults source=PmWiki.Forms:)%0a(:input textarea name=$:Message rows=4:)%0a(:markupend:)%0aYes!  It works now.%0a
time=1220590809
